####### Custom Permissions #######

class IsReadAllCreateAdmin(permissions.BasePermission):
    """
    create category if user in group or user is_superuser
    read all users
    """

    def has_permission(self, request, view):
        if request.method in permissions.SAFE_METHODS:
            return True
        if (
                request.method == 'POST'
                and (request.user.groups.filter(name='group_create_read_category').exists()
                     or request.user.is_superuser)
        ):
            return True

####### Filter, Search, Ordering #######

1. Устанавливаем django-filters
2.Добавляем в настройки REST_FRAMEWORK -> 'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend', 'Тут может быть так же кастомная фильтрация'
    ]
3. Для фильтрации добавляем след поля:
    filter_backends = [DjangoFilterBackend]
    filterset_fields = [
            'category__name', "добавляем сюда по каким полям фильтруем"
        ]
4. Для поиска добавляем след поля:
    filter_backends = [SearchFilter]
    search_fields = ['name', "добавляем сюда по каким полям ищем"]
5. Для сортировки добавляем след поля:
    filter_backends = [OrderingFilter]
    ordering_fields = ['price', 'quantity', "добавляем сюда по каким полям search"]
6. Пример использования всего сразу:

    class ProductListAPIView(generics.ListAPIView):
        queryset = Product.objects.all()
        serializer_class = ProductSerializers
        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]
        search_fields = ['name']
        filterset_fields = [
            'category__name'
        ]
        ordering_fields = ['price', 'quantity']



















